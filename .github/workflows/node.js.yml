# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    timeout-minutes: 30
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      PROJECT_ID: iuqnzrcqlvpsznhqdsln

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - uses: supabase/setup-cli@v1
      with:
        version: latest
    - run: npm ci
    - run: supabase gen types typescript --project-id "$PROJECT_ID" --schema public > types/supabase.ts
    - run: npm run build --if-present
    - run: supabase init
    - run: supabase start
    - run: sleep 60 # Wait for a while to ensure Supabase is up and running
    - name: Run a command and save output to env file
      id: step1
      run: |
        my_output=$(supabase status -o json | jq -r '.ANON_KEY')
        echo "MY_OUTPUT=$my_output" >> $GITHUB_ENV
    - name: Use the output from previous step
      run: echo "The output was ${{ env.MY_OUTPUT }}"
    - name: Use environment variable in Node.js app
      env:
        MY_VAR: ${{ env.MY_OUTPUT }}
      run: |
        echo "MY_VAR is $MY_VAR"
        # Assuming you have a Node.js script that prints process.env.MY_VAR
        node -e "console.log('MY_VAR in Node.js:', process.env.MY_VAR.length)"